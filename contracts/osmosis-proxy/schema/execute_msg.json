{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Create a new native token denom",
      "type": "object",
      "required": [
        "create_denom"
      ],
      "properties": {
        "create_denom": {
          "type": "object",
          "required": [
            "subdenom"
          ],
          "properties": {
            "max_supply": {
              "description": "Max supply of the token. Enforced by the contract, not Osmosis.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "subdenom": {
              "description": "Subdenom of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Change the admin of a denom",
      "type": "object",
      "required": [
        "change_admin"
      ],
      "properties": {
        "change_admin": {
          "type": "object",
          "required": [
            "denom",
            "new_admin_address"
          ],
          "properties": {
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "new_admin_address": {
              "description": "New admin address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Mint tokens of a denom owned by the contract",
      "type": "object",
      "required": [
        "mint_tokens"
      ],
      "properties": {
        "mint_tokens": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "mint_to_address"
          ],
          "properties": {
            "amount": {
              "description": "Amount to mint",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "mint_to_address": {
              "description": "Mint to address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burn tokens",
      "type": "object",
      "required": [
        "burn_tokens"
      ],
      "properties": {
        "burn_tokens": {
          "type": "object",
          "required": [
            "amount",
            "burn_from_address",
            "denom"
          ],
          "properties": {
            "amount": {
              "description": "Amount to burn",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "burn_from_address": {
              "description": "Burn from address",
              "type": "string"
            },
            "denom": {
              "description": "Native token denom",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit the max supply of a denom",
      "type": "object",
      "required": [
        "create_osmosis_gauge"
      ],
      "properties": {
        "create_osmosis_gauge": {
          "type": "object",
          "required": [
            "gauge_msg"
          ],
          "properties": {
            "gauge_msg": {
              "$ref": "#/definitions/MsgCreateGauge"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit the max supply of a denom",
      "type": "object",
      "required": [
        "edit_token_max_supply"
      ],
      "properties": {
        "edit_token_max_supply": {
          "type": "object",
          "required": [
            "denom",
            "max_supply"
          ],
          "properties": {
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "max_supply": {
              "description": "New max supply",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "add_owner": {
              "description": "Toggle to add or remove list of owners",
              "type": [
                "boolean",
                "null"
              ]
            },
            "debt_auction": {
              "description": "Debt auction contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "liquidity_contract": {
              "description": "Liquidity contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "liquidity_multiplier": {
              "description": "Liquidity multiplier for CDT mint caps",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "oracle_contract": {
              "description": "Oracle contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "owners": {
              "description": "List of owners",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Owner"
              }
            },
            "positions_contract": {
              "description": "Positions contract address",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit owner params & permissions",
      "type": "object",
      "required": [
        "edit_owner"
      ],
      "properties": {
        "edit_owner": {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "non_token_contract_auth": {
              "description": "Toggle authority over non-token contract state",
              "type": [
                "boolean",
                "null"
              ]
            },
            "owner": {
              "description": "Owner address",
              "type": "string"
            },
            "stability_pool_ratio": {
              "description": "Distribute cap space from Stability Pool liquidity",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "type": "string"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "type": "object",
      "required": [
        "nanos",
        "seconds"
      ],
      "properties": {
        "nanos": {
          "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MsgCreateGauge": {
      "description": "MsgCreateGauge creates a gague to distribute rewards to users",
      "type": "object",
      "required": [
        "coins",
        "is_perpetual",
        "num_epochs_paid_over",
        "owner"
      ],
      "properties": {
        "coins": {
          "description": "coins are coin(s) to be distributed by the gauge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "distribute_to": {
          "description": "distribute_to show which lock the gauge should distribute to by time duration or by timestamp",
          "anyOf": [
            {
              "$ref": "#/definitions/QueryCondition"
            },
            {
              "type": "null"
            }
          ]
        },
        "is_perpetual": {
          "description": "is_perpetual shows if it's a perpetual or non-perpetual gauge Non-perpetual gauges distribute their tokens equally per epoch while the gauge is in the active period. Perpetual gauges distribute all their tokens at a single time and only distribute their tokens again once the gauge is refilled",
          "type": "boolean"
        },
        "num_epochs_paid_over": {
          "description": "num_epochs_paid_over is the number of epochs distribution will be completed over",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "owner is the address of gauge creator",
          "type": "string"
        },
        "start_time": {
          "description": "start_time is the distribution start time",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Owner": {
      "description": "Osmosis Proxy",
      "type": "object",
      "required": [
        "is_position_contract",
        "non_token_contract_auth",
        "owner",
        "total_minted"
      ],
      "properties": {
        "is_position_contract": {
          "description": "Is a position's contract?",
          "type": "boolean"
        },
        "non_token_contract_auth": {
          "description": "Authority over non-token contract messages",
          "type": "boolean"
        },
        "owner": {
          "description": "Owner address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "stability_pool_ratio": {
          "description": "Stability pool ratio allocated to CDT mint caps",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "total_minted": {
          "description": "Total CDT minted",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "QueryCondition": {
      "description": "QueryCondition is a struct used for querying locks upon different conditions. Duration field and timestamp fields could be optional, depending on the LockQueryType.",
      "type": "object",
      "required": [
        "denom",
        "lock_query_type"
      ],
      "properties": {
        "denom": {
          "description": "Denom represents the token denomination we are looking to lock up",
          "type": "string"
        },
        "duration": {
          "description": "Duration is used to query locks with longer duration than the specified duration. Duration field must not be nil when the lock query type is `ByLockDuration`.",
          "anyOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "type": "null"
            }
          ]
        },
        "lock_query_type": {
          "description": "LockQueryType is a type of lock query, ByLockDuration | ByLockTime",
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "description": "Timestamp is used by locks started before the specified duration. Timestamp field must not be nil when the lock query type is `ByLockTime`. Querying locks with timestamp is currently not implemented.",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Timestamp": {
      "type": "object",
      "required": [
        "nanos",
        "seconds"
      ],
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
