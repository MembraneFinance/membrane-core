{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Create a new native token denom",
      "type": "object",
      "required": [
        "create_denom"
      ],
      "properties": {
        "create_denom": {
          "type": "object",
          "required": [
            "subdenom"
          ],
          "properties": {
            "max_supply": {
              "description": "Max supply of the token. Enforced by the contract, not Osmosis.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "subdenom": {
              "description": "Subdenom of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Change the admin of a denom",
      "type": "object",
      "required": [
        "change_admin"
      ],
      "properties": {
        "change_admin": {
          "type": "object",
          "required": [
            "denom",
            "new_admin_address"
          ],
          "properties": {
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "new_admin_address": {
              "description": "New admin address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Mint tokens of a denom owned by the contract",
      "type": "object",
      "required": [
        "mint_tokens"
      ],
      "properties": {
        "mint_tokens": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "mint_to_address"
          ],
          "properties": {
            "amount": {
              "description": "Amount to mint",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "mint_to_address": {
              "description": "Mint to address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burn tokens",
      "type": "object",
      "required": [
        "burn_tokens"
      ],
      "properties": {
        "burn_tokens": {
          "type": "object",
          "required": [
            "amount",
            "burn_from_address",
            "denom"
          ],
          "properties": {
            "amount": {
              "description": "Amount to burn",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "burn_from_address": {
              "description": "Burn from address",
              "type": "string"
            },
            "denom": {
              "description": "Native token denom",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit the max supply of a denom",
      "type": "object",
      "required": [
        "edit_token_max_supply"
      ],
      "properties": {
        "edit_token_max_supply": {
          "type": "object",
          "required": [
            "denom",
            "max_supply"
          ],
          "properties": {
            "denom": {
              "description": "Native token denom",
              "type": "string"
            },
            "max_supply": {
              "description": "New max supply",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "add_owner"
          ],
          "properties": {
            "add_owner": {
              "description": "Toggle to add or remove list of owners",
              "type": "boolean"
            },
            "debt_auction": {
              "description": "Debt auction contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "liquidity_contract": {
              "description": "Liquidity contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "owners": {
              "description": "List of owners",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Owner"
              }
            },
            "positions_contract": {
              "description": "Positions contract address",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit owner params & permissions",
      "type": "object",
      "required": [
        "edit_owner"
      ],
      "properties": {
        "edit_owner": {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "liquidity_multiplier": {
              "description": "Liquidity multiplier for debt caps. Ex: 5 = debt cap at 5x liquidity",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "non_token_contract_auth": {
              "description": "Toggle authority over non-token contract state",
              "type": [
                "boolean",
                "null"
              ]
            },
            "owner": {
              "description": "Owner address",
              "type": "string"
            },
            "stability_pool_ratio": {
              "description": "Distribute cap space from Stability Pool liquidity",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Owner": {
      "description": "Osmosis Proxy",
      "type": "object",
      "required": [
        "non_token_contract_auth",
        "owner",
        "total_minted"
      ],
      "properties": {
        "liquidity_multiplier": {
          "description": "Liquidity multiplier for CDT mint caps",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "non_token_contract_auth": {
          "description": "Authority over non-token contract messages",
          "type": "boolean"
        },
        "owner": {
          "description": "Owner address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "stability_pool_ratio": {
          "description": "Stability pool ratio allocated to CDT mint caps",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "total_minted": {
          "description": "Total CDT minted",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
