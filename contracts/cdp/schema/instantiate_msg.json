{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "collateral_twap_timeframe",
    "credit_twap_timeframe",
    "debt_minimum",
    "liq_fee",
    "oracle_time_limit"
  ],
  "properties": {
    "collateral_twap_timeframe": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "credit_twap_timeframe": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "debt_auction": {
      "type": [
        "string",
        "null"
      ]
    },
    "debt_minimum": {
      "$ref": "#/definitions/Uint128"
    },
    "dex_router": {
      "type": [
        "string",
        "null"
      ]
    },
    "interest_revenue_collector": {
      "type": [
        "string",
        "null"
      ]
    },
    "liq_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "liquidity_contract": {
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_contract": {
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_time_limit": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "osmosis_proxy": {
      "type": [
        "string",
        "null"
      ]
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "stability_pool": {
      "type": [
        "string",
        "null"
      ]
    },
    "staking_contract": {
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
